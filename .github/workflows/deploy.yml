name: Deploy

on:
  workflow_call:
    inputs:
      environment:
        description: Environment name (e.g., staging, prod).
        required: true
        type: string
    secrets:
      GH_ACTIONS_AWS_ROLE:
        required: true
      NEON_API_KEY:
        required: false

permissions:
  contents: read
  id-token: write

env:
  DOTNET_VERSION: 9.0.x
  AWS_REGION: us-east-1
  TARGET_ENV: ${{ inputs.environment }}

jobs:
  test:
    name: Run tests
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v5
        with:
          fetch-depth: 1

      - name: Setup .NET
        uses: actions/setup-dotnet@v5
        with:
          dotnet-version: ${{ env.DOTNET_VERSION }}
          cache: true
          cache-dependency-path: |
            **/*.csproj
            **/*.props

      - name: Restore
        run: dotnet restore WasabiBot.slnx

      - name: Build
        run: dotnet build WasabiBot.slnx --configuration Release --no-restore

      - name: Test
        run: dotnet test --configuration Release --no-build --verbosity minimal

  build_image:
    name: Build & push image
    runs-on: ubuntu-latest
    needs: test
    outputs:
      image_repo: ${{ steps.meta.outputs.repo }}
      image_tag: ${{ steps.meta.outputs.tag }}
      image_uri: ${{ steps.meta.outputs.uri }}
      image_full_tag: ${{ steps.meta.outputs.full_tag }}
      image_digest: ${{ steps.describe-image.outputs.digest }}
      image_ref: ${{ steps.describe-image.outputs.image }}
    steps:
      - name: Checkout
        uses: actions/checkout@v5
        with:
          fetch-depth: 1

      - name: Setup build environment
        id: env_setup
        uses: ./.github/actions/workflow-setup
        with:
          configure-aws: 'true'
          role-to-assume: ${{ secrets.GH_ACTIONS_AWS_ROLE }}
          aws-region: ${{ env.AWS_REGION }}
          login-ecr: 'true'

      - name: Set image metadata
        id: meta
        run: |
          target_env="${{ env.TARGET_ENV }}"
          repo="wasabi-bot/wasabi-bot-api-$target_env"
          image_tag="${GITHUB_SHA::12}"
          image_uri="${{ steps.env_setup.outputs.ecr-registry }}/$repo"
          echo "repo=$repo" >> "$GITHUB_OUTPUT"
          echo "tag=$image_tag" >> "$GITHUB_OUTPUT"
          echo "uri=$image_uri" >> "$GITHUB_OUTPUT"
          echo "full_tag=$image_uri:$image_tag" >> "$GITHUB_OUTPUT"

      - name: Build image
        run: |
          docker build \
            --file src/WasabiBot.Api/Dockerfile \
            --tag "${{ steps.meta.outputs.full_tag }}" \
            --tag "${{ steps.meta.outputs.uri }}:latest" \
            .

      - name: Push image tags
        run: |
          docker push "${{ steps.meta.outputs.full_tag }}"
          docker push "${{ steps.meta.outputs.uri }}:latest"

      - name: Capture digest
        id: describe-image
        run: |
          digest=$(aws ecr describe-images \
            --repository-name "${{ steps.meta.outputs.repo }}" \
            --image-ids imageTag="${{ steps.meta.outputs.tag }}" \
            --query 'imageDetails[0].imageDigest' \
            --output text)
          echo "digest=$digest" >> "$GITHUB_OUTPUT"
          echo "image=${{ steps.meta.outputs.uri }}@$digest" >> "$GITHUB_OUTPUT"

      - name: Share image metadata
        run: |
          echo "Pushed image: ${{ steps.describe-image.outputs.image }}"
          echo "Tag: ${{ steps.meta.outputs.tag }}"
          echo "Digest: ${{ steps.describe-image.outputs.digest }}"

  tf_plan:
    name: Terraform plan
    runs-on: ubuntu-latest
    needs: build_image
    env:
      TF_VAR_image_digest: ${{ needs.build_image.outputs.image_digest }}
      NEON_API_KEY: ${{ secrets.NEON_API_KEY }}
    defaults:
      run:
        working-directory: infra/envs/${{ env.TARGET_ENV }}
    steps:
      - name: Checkout
        uses: actions/checkout@v5
        with:
          fetch-depth: 1

      - name: Setup environment
        uses: ./.github/actions/workflow-setup
        with:
          configure-aws: 'true'
          role-to-assume: ${{ secrets.GH_ACTIONS_AWS_ROLE }}
          aws-region: ${{ env.AWS_REGION }}
          configure-terraform: 'true'

      - name: Terraform init
        run: terraform init -input=false

      - name: Terraform validate
        run: terraform validate

      - name: Terraform plan
        run: terraform plan -input=false -out=tfplan

      - name: Show plan (summary)
        run: terraform show -no-color tfplan | head -n 200

  tf_apply:
    name: Terraform apply
    runs-on: ubuntu-latest
    needs: [tf_plan, build_image]
    environment: ${{ inputs.environment }}
    env:
      TF_VAR_image_digest: ${{ needs.build_image.outputs.image_digest }}
      NEON_API_KEY: ${{ secrets.NEON_API_KEY }}
    defaults:
      run:
        working-directory: infra/envs/${{ env.TARGET_ENV }}
    steps:
      - name: Checkout
        uses: actions/checkout@v5
        with:
          fetch-depth: 1

      - name: Setup environment
        uses: ./.github/actions/workflow-setup
        with:
          configure-aws: 'true'
          role-to-assume: ${{ secrets.GH_ACTIONS_AWS_ROLE }}
          aws-region: ${{ env.AWS_REGION }}
          configure-terraform: 'true'

      - name: Terraform init
        run: terraform init -input=false

      - name: Terraform apply
        run: terraform apply -input=false -auto-approve

  migrate:
    name: Run migrations
    runs-on: ubuntu-latest
    needs: [test, build_image]
    environment: ${{ inputs.environment }}
    steps:
      - name: Checkout
        uses: actions/checkout@v5
        with:
          fetch-depth: 1

      - name: Setup environment
        uses: ./.github/actions/workflow-setup
        with:
          configure-aws: 'true'
          role-to-assume: ${{ secrets.GH_ACTIONS_AWS_ROLE }}
          aws-region: ${{ env.AWS_REGION }}
      
      - name: Resolve connection string
        run: |
          param_name="/wasabi-bot/${{ env.TARGET_ENV }}/NeonDbConnectionString"
          conn=$(aws ssm get-parameter \
            --name "$param_name" \
            --with-decryption \
            --query 'Parameter.Value' \
            --output text)
          if [ -z "$conn" ]; then
            echo "Failed to resolve connection string from SSM parameter $param_name" >&2
            exit 1
          fi
          echo "ConnectionStrings__wasabi-db=$conn" >> "$GITHUB_ENV"

      - name: Setup .NET
        uses: actions/setup-dotnet@v5
        with:
          dotnet-version: ${{ env.DOTNET_VERSION }}

      - name: Restore (migrations project)
        run: dotnet restore WasabiBot.slnx

      - name: Build migrations project
        run: dotnet build src/WasabiBot.Migrations/WasabiBot.Migrations.csproj --configuration Release --no-restore

      - name: Apply migrations
        run: dotnet run --project src/WasabiBot.Migrations/WasabiBot.Migrations.csproj --configuration Release
